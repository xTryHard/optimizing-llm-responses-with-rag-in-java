package com.theitdojo.optimizing_llm_responses_with_rag_in_java.services;

import java.util.stream.Stream;

/**
 * Defines the contract for interacting with a Large Language Model (LLM).
 * This interface provides a set of common operations for sending prompts
 * and receiving responses, both synchronously and asynchronously (streaming).
 * It will serve as the foundation for the workshop exercises.
 */
public interface ChatAssistant {

    /**
     * The most basic interaction: sends a single prompt to the LLM and gets a complete response back.
     * This is a simple, synchronous request-response interaction.
     *
     * @param message The user's question or instruction.
     * @return The complete text response from the LLM.
     */
    String getResponse(String message);

    /**
     * Sends a prompt to the LLM and streams the response back as it's being generated.
     * This is useful for providing a more interactive, real-time experience to the user.
     *
     * @param message The user's question or instruction.
     * @return A Stream that emits the response in chunks (tokens) as they are generated by the LLM.
     */
    Stream<String> streamResponse(String message);

    /**
     * Sends a question to the LLM along with some context.
     * The LLM is expected to use the provided context to answer the question.
     * This method is a fundamental building block for the workshop's goal of
     * implementing Retrieval-Augmented Generation (RAG).
     *
     * @param context  The context information (e.g., from a document) the LLM should use.
     * @param question The user's question related to the context.
     * @return A {@link Stream} of strings. It emits chunks as they are generated, grounded with the provided context.
     *
     */
    Stream<String> askQuestionWithContext(String context, String question);

    /**
     * Provides a unified way to ask a question, supporting both synchronous (single response)
     * and asynchronous (streaming) modes. This method always returns a Stream.
     *
     * @param message The user's question or instruction.
     * @param stream  If true, streams the response. If false, returns a stream containing a single, complete response.
     * @return A {@link Stream} of strings. If streaming, it emits chunks as they are generated.
     *         If not streaming, it emits a single element containing the full response.
     */
    default Stream<String> askQuestion(String message, boolean stream) {
        if (stream) {
            return streamResponse(message);
        } else {
            return Stream.of(getResponse(message));
        }
    }

}
